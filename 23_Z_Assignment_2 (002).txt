Your supermarket company is in the process of improving their Docker-based applications. 
They have built a set of three RESTful data services that communicate with each other as part of a larger infrastructure. 
You have been given the task of designing a Docker application stack so that these three services can be easily managed and scaled as a unit.
 A Docker Swarm cluster has already been set up by you to use in previous execises.

Here is some background information on the three services:

1. Fruit Service
	a. Provides a list of fruits sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/fruit-service:1.0.1 to run this service.
	c. Listens on port 80.
	d. The service should be named fruit inside the stack.

2. Vegetable Service
	a. Provides a list of vegetables sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/vegetable-service:1.0.0 to run this service.
	c. Listens on port 80.
	d. The service should be named vegetables inside the stack.

3. All Products Service
	a. Queries the other two services, combining their data into a single list of all produce.
	b. You can use the Docker image tag linuxacademycontent/all-products:1.0.0 to run this service.
	c. Listens on port 80.
	d. Use the environment variables FRUIT_HOST and FRUIT_PORT to set the host and port which will be used to query the fruit service.
	e. Use the environment variables VEGETABLE_HOST and VEGETABLE_PORT to set the host and port which will be used to query the vegetable service.

Step 1
Deploy a Docker application stack that meets the following specifications:
1. The stack is called produce.
2. The stack runs the Fruit, Vegetable, and All Products services.
3. The All Products service is able to query the Fruit and Vegetable services.
4. The All Products service is published on port 8080.


Solution:

master $ vi producestack.yml

version: '3'
services: 
 fruit: 
  image: linuxacademycontent/fruit-service:1.0.1
  ports:
   - 8081:80
  environment:
   - FRUIT_HOST=172.31.29.245
   - FRUIT_PORT=8081
    
 vegetable:
  image: linuxacademycontent/vegetable-service:1.0.0
  ports:
   - 8082:80
  environment:
   - VEGETABLE_HOST=172.31.29.245
   - VEGETABLE_PORT=8082
 
 allproduct:
  image: linuxacademycontent/all-products:1.0.0
  ports:
   - 8080:80
  depend_on:
   - fruit
   - vegetable
  environment:
   - FRUIT_HOST=172.31.29.245
   - FRUIT_PORT=8081
   - VEGETABLE_HOST=172.31.29.245
   - VEGETABLE_PORT=8082

$ docker stack deploy -c produce.yml produce
Creating network produce_default
Creating service produce_allproduct
Creating service produce_fruit
Creating service produce_vegetable
$ docker service ls
ID                  NAME                 MODE                REPLICAS            IMAGE                                         PORTS
lrw71pjy5iy7        produce_allproduct   replicated          1/1                 linuxacademycontent/all-products:1.0.0        *:8080->80/tcp
j2fjjcdblovd        produce_fruit        replicated          1/1                 linuxacademycontent/fruit-service:1.0.1       *:8081->80/tcp
gckisz17izg7        produce_vegetable    replicated          1/1                 linuxacademycontent/vegetable-service:1.0.0   *:8082->80/tcp
mtcu540w989h        registry             replicated          1/1                 registry:2                                    *:443->443/tcp

$ docker stack ls
NAME                SERVICES            ORCHESTRATOR
produce             3                   Swarm


One you have deployed the stack, you can verify whether it is working by querying the All Products service:

curl localhost:8080


If the stack is set up correctly, you should get a combined list of fruits and vegetables.

$ curl http://172.31.29.245:8080
{"description":"A list of all produce.","products":["acorn squash","alfalfa sprout","amaranth","anise","apple","apricot","artichoke","arugula","asparagus","aubergine","avocado","azuki bean","banana","banana squash","basil","bean sprout","beet","bell pepper","bilberry","black bean","black-eyed pea","blackberry","blackcurrant","blood orange","blueberry","



Step 2
Once you have deployed the stack and verified that it is working, modify the stack by scaling both the Fruit and Vegetable services up to 3 replicas.

$ docker service update --replicas 3 produce_vegetable
produce_vegetable
overall progress: 3 out of 3 tasks 
1/3: running   [==================================================>] 
2/3: running   [==================================================>] 
3/3: running   [==================================================>] 
verify: Service converged 



$ docker service update --replicas 3 produce_fruit
produce_fruit
overall progress: 3 out of 3 tasks 
1/3: running   [==================================================>] 
2/3: running   [==================================================>] 
3/3: running   [==================================================>] 
verify: Service converged 
$ docker service ls
ID                  NAME                 MODE                REPLICAS            IMAGE                                         PORTS
lrw71pjy5iy7        produce_allproduct   replicated          1/1                 linuxacademycontent/all-products:1.0.0        *:8080->80/tcp
j2fjjcdblovd        produce_fruit        replicated          3/3                 linuxacademycontent/fruit-service:1.0.1       *:8081->80/tcp
gckisz17izg7        produce_vegetable    replicated          3/3                 linuxacademycontent/vegetable-service:1.0.0   *:8082->80/tcp
mtcu540w989h        registry             replicated          1/1                 registry:2                                    *:443->443/tcp



